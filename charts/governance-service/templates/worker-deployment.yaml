apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "governance-worker.fullname" . }}
  labels:
    {{- include "governance-worker.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.worker.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "governance-worker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "governance-worker.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccount:
        name: {{ include "governance-service.serviceAccountName" . }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.worker.image.repository }}:{{ .Values.worker.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.worker.image.pullPolicy }}
          command: {{ .Values.worker.command }}
          args: {{ .Values.worker.args }}
          envFrom:
            - configMapRef:
                name: {{ include "governance-worker.fullname" . }}
            - secretRef:
                name: {{ include "governance-service.fullname" . }}
          env:
          - name: LOG_LEVEL
            value: {{ .Values.config.logLevel }}
          - name: APP_ENV
            value: {{ .Values.config.appEnv }}
          - name: DB_HOST
            value: "{{ .Release.Name }}-postgresql"
          - name: DB_PORT
            value: "{{ .Values.externalDatabase.port }}"
          - name: DB_NAME
            value: {{ .Values.externalDatabase.database }}
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if .Values.externalDatabase.passwordSecretKeyRef }}
                name: {{ .Values.externalDatabase.passwordSecretKeyRef.name | quote }}
                key: {{ .Values.externalDatabase.passwordSecretKeyRef.key | quote }}
                {{- else }}
                name: "postgresql"
                key: "postgres-password"
                {{- end }}
          {{- if .Values.credentialEncryptionKeySecretKeyRef }}
          # Get encryption key from external secret
          - name: CREDENTIAL_ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.credentialEncryptionKeySecretKeyRef.name | quote }}
                key: {{ .Values.credentialEncryptionKeySecretKeyRef.key | quote }}
          {{- end }}
          {{- if .Values.migrations }}
          # Run migrations on startup
          - name: MIGRATIONS_RUN_AT_STARTUP
            value: {{ .Values.migrations.runAtStartup | quote }}
          - name: MIGRATIONS_PATH
            value: {{ .Values.migrations.path | quote }}
          {{- end }}
          - name: MAIN_API_BASE_URL
            value: "http://{{ include "governance-service.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.port }}"
          - name: AUTH_SERVICE_URL
            value: {{ .Values.config.authServiceUrl }}
          {{- if .Values.worker.m2mCredentials }}
          # M2M credentials for worker authentication
          - name: M2M_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.worker.m2mCredentials.secretName | quote }}
                key: {{ .Values.worker.m2mCredentials.clientIdKey | default "client-id" | quote }}
          - name: M2M_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Values.worker.m2mCredentials.secretName | quote }}
                key: {{ .Values.worker.m2mCredentials.clientSecretKey | default "client-secret" | quote }}
          - name: AUTH0_DOMAIN
            value: {{ .Values.config.auth0Domain | quote }}
          - name: AUTH0_AUDIENCE
            value: {{ .Values.worker.m2mCredentials.audience | default "https://governance.eqtylab.io" | quote }}
          {{- end }}
          volumeMounts:
            - name: gcp-sa-volume
              mountPath: /var/secrets/google
              readOnly: true
          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: gcp-sa-volume
          secret:
            secretName: {{ .Values.serviceAccount.name | quote }}
            items:
              - key: "gcs-sa.json"
                path: "attachments-sa.json"
