# Keycloak Provider Configuration for Enterprise/On-Premises Deployment
# This values file configures the auth-service to use Keycloak as the identity provider

config:
  idp:
    provider: "keycloak"
    issuer: "https://keycloak.your-domain.com/realms/your-realm"
    clientId: "auth-service"
    clientSecret: "your-keycloak-client-secret"

    # Keycloak-specific configuration
    keycloak:
      url: "https://keycloak.your-domain.com"
      realm: "your-realm"

      # Admin API configuration for user management
      adminAPI:
        enabled: true
        username: "admin"
        password: "admin-password"

    # Use existing secret for production
    # existingSecret: "auth-service-keycloak-credentials"
    # existingSecretKeys:
    #   clientId: "client-id"
    #   clientSecret: "client-secret"
    #   keycloak:
    #     adminAPI:
    #       username: "admin-username"
    #       password: "admin-password"

  # Database configuration for on-premises
  database:
    # Local PostgreSQL instance
    host: "postgresql.your-domain.local"
    port: 5432
    name: "auth_service"
    user: "auth_service_user"
    password: "your-db-password"
    sslMode: "disable" # Often disabled in internal networks
    # Use existing secret for credentials
    # existingSecret: "auth-service-db-credentials"
    # existingSecretKeys:
    #   password: "password"

  # Key Vault configuration for on-premises
  keyVault:
    provider: "hashicorp"
    hashicorp:
      address: "https://vault.your-domain.local:8200"
      token: "your-vault-token"
      # Use existing secret for credentials
      # existingSecret: "auth-service-vault-credentials"
      # existingSecretKeys:
      #   token: "token"

# Conservative settings for on-premises deployment
replicaCount: 2

autoscaling:
  enabled: false # Manual scaling for on-premises

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Enable metrics for monitoring
metrics:
  enabled: true
  port: 9090
  path: "/metrics"

# Health checks
healthCheck:
  liveness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
  readiness:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 5

# Ingress configuration for on-premises
ingress:
  enabled: true
  className: "nginx"
  annotations:
    # Use internal CA for on-premises
    cert-manager.io/cluster-issuer: "internal-ca"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: auth.your-domain.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: auth-service-tls
      hosts:
        - auth.your-domain.local

# Node selector for on-premises deployment
nodeSelector:
  node-role.kubernetes.io/worker: "true"

# Tolerations for on-premises deployment
tolerations: []

# Affinity rules for on-premises deployment
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - auth-service
          topologyKey: kubernetes.io/hostname
