# Sample secrets configuration file for Governance Studio
# WARNING: This is a template file - do not use these values in production
# WARNING: Do not check your actual secrets into version control

global:
  secrets:
    # Enable automatic secret creation
    createSecrets: true

    # Secret values for all components
    values:
      # Compliance Garage secrets
      compliance:
        # Database connection string (used by all Compliance Garage components)
        # If not provided, it will be generated from the database settings
        databaseUrl: "postgresql://postgres:example-password@postgresql:5432/governance"

        # Redis connection string
        # If not provided, it will be generated from the Redis settings
        redisUrl: "redis://redis-master:6379"

        # Gemini API key for AI features
        geminiApiKey: "example-gemini-api-key"

      # Auth0 authentication
      auth0:
        clientId: "example-auth0-client-id"
        clientSecret: "example-auth0-client-secret"
        domain: "example-tenant.us.auth0.com"

      # Database credentials
      database:
        postgresPassword: "example-postgres-password"
        redisPassword: "example-redis-password"

      # Blob storage
      blobStorage:
        # For GCP (needs to use the actual JSON file content)
        gcsServiceAccountJson: |
          {
            "type": "service_account",
            "project_id": "",
            "private_key_id": "",
            "private_key": "",
            "client_id": "",
            "auth_uri": "",
            "token_uri": "",
            "auth_provider_x509_cert_url": "",
            "client_x509_cert_url": "",
            "universe_domain": ""
          }

        # For Azure
        azureStorageAccountName: "examplestorageaccount"
        azureStorageAccountKey: "example-storage-account-key"
        connectionString: "DefaultEndpointsProtocol=https;AccountName=exampleaccount;AccountKey=example-key==;EndpointSuffix=core.windows.net"
        emailString: "endpoint=https://example-communications.unitedstates.communication.azure.com/;accesskey=example-access-key=="

        # For AWS
        awsAccessKeyId: "EXAMPLEACCESSKEY"
        awsSecretAccessKey: "example-aws-secret-access-key"

      # Azure Key Vault
      azureKeyVault:
        clientId: "example-azure-client-id"
        clientSecret: "example-azure-client-secret"
        tenantId: "example-azure-tenant-id"
        vaultUrl: "https://example-kv.vault.azure.net/"

      # AI/ML credentials
      huggingFace:
        token: "example-hugging-face-token"

      # OpenAI credentials
      openai:
        apiKey: "example-openai-api-key"

      # Platform encryption
      encryption:
        key: "example-encryption-key" # Should be a properly generated encryption key
        azureKeyVaultUrl: "https://example-kv.vault.azure.net/"
        azureKeyVaultClientId: "example-azure-client-id"
        azureKeyVaultClientSecret: "example-azure-client-secret"
        azureKeySecretName: "db-encryption-key"
        azureKeyVaultTenantId: "example-azure-tenant-id"

      # Container registry credentials
      imagePull:
        username: "example-github-username" # GitHub username or token name
        password: "example-github-token" # GitHub PAT with read:packages scope
        email: "example@example.com" # Email associated with GitHub account

      # Auth Service specific secrets
      authService:
        # Database password for auth service (can be same as postgresPassword)
        dbPassword: "example-postgres-password"
        # Session secret for auth service (generate with: openssl rand -base64 32)
        sessionSecret: "example-session-secret-base64-encoded-32-bytes"
        # API secret for auth service (generate with: openssl rand -base64 32)
        apiSecret: "example-api-secret-base64-encoded-32-bytes"
        # JWT secret for auth service (generate with: openssl rand -base64 32)
        jwtSecret: "example-jwt-secret-base64-encoded-32-bytes"

      # Governance Worker Service Account
      governanceWorker:
        # Encryption key for service accounts (generate with: openssl rand -base64 32)
        encryptionKey: "example-encryption-key-base64-encoded-32-bytes"
        # Auth0 M2M application client ID for governance worker
        clientId: "example-m2m-client-id"
        # Auth0 M2M application client secret for governance worker
        clientSecret: "example-m2m-client-secret"
